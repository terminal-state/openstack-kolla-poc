---
- name: Wait for containers to stabilize
  ansible.builtin.pause:
    seconds: 60
    prompt: "Waiting for OpenStack containers to stabilize..."

- name: Wait for OpenStack services to stabilize
  ansible.builtin.pause:
    seconds: 60
    prompt: "Waiting for OpenStack services to start..."

- name: Check if admin-openrc.sh exists
  ansible.builtin.stat:
    path: /etc/kolla/admin-openrc.sh
  register: admin_rc_stat

- name: Create admin-openrc.sh manually
  ansible.builtin.shell: |
    cat > /etc/kolla/admin-openrc.sh << 'RCEOF'
    export OS_PROJECT_DOMAIN_NAME=Default
    export OS_USER_DOMAIN_NAME=Default
    export OS_PROJECT_NAME=admin
    export OS_USERNAME=admin
    export OS_PASSWORD=$(grep keystone_admin_password /etc/kolla/passwords.yml | cut -d: -f2 | tr -d " ")
    export OS_AUTH_URL=http://192.168.100.200:5000/v3
    export OS_IDENTITY_API_VERSION=3
    export OS_REGION_NAME=RegionOne
    export OS_INTERFACE=internal
    RCEOF
    chmod 644 /etc/kolla/admin-openrc.sh
  become: true
  when: not admin_rc_stat.stat.exists

- name: Fix nova CPU configuration on compute nodes for nested virtualization
  ansible.builtin.shell: |
    # Add cpu_mode if not present
    if ! grep -q "^cpu_mode = " /etc/kolla/nova-compute/nova.conf; then
      sed -i '/^\[libvirt\]/a cpu_mode = custom' /etc/kolla/nova-compute/nova.conf
    else
      sed -i 's/^cpu_mode = .*/cpu_mode = custom/' /etc/kolla/nova-compute/nova.conf
    fi
    
    # Add cpu_model if not present
    if ! grep -q "^cpu_model = " /etc/kolla/nova-compute/nova.conf; then
      sed -i '/^cpu_mode = custom/a cpu_model = Nehalem' /etc/kolla/nova-compute/nova.conf
    else
      sed -i 's/^cpu_model = .*/cpu_model = Nehalem/' /etc/kolla/nova-compute/nova.conf
    fi
    
    # Remove invalid cpu_models (plural)
    sed -i '/^cpu_models = /d' /etc/kolla/nova-compute/nova.conf
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['compute'] }}"
  when: groups['compute'] is defined

- name: Restart nova-compute containers after fixes
  ansible.builtin.command: docker restart nova_compute
  become: true
  delegate_to: "{{ item }}"
  loop: "{{ groups['compute'] }}"
  when: groups['compute'] is defined
  failed_when: false
